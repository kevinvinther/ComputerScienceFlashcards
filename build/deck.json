{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "166016b4-17ea-11ed-ba04-40b076444a23",
    "deck_config_uuid": "539b82a0-a514-11ec-b44f-acde48001122",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "539b82a0-a514-11ec-b44f-acde48001122",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Computer Science",
            "new": {
                "bury": true,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 0,
                "perDay": 10,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": true,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 100
            },
            "reviewOrder": 0,
            "timer": 1
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [
        "dfa1.png",
        "paste-8e998cac5d6e4b989e6bc335e69a1bbb42cb18e7.jpg"
    ],
    "name": "Computer Science",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.tag {\n  color: white;\n  background-color: #9F2BFF;\n  font-size: 11px;\n  font-weight: bold;\n  padding: 4px;\n  border-radius: 10px;\n  vertical-align: middle;\n}\n\npre {\n  font-family: monospace;\n  font-size: 12px;\n  text-align: left;\n  color: black;\n  background-color: #F0F0F0;\n  border: 1px solid #CCC;\n}\n",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Computer Science Basic",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Front",
                    "ord": 0,
                    "qfmt": "{{Front}}\n<br /> <br />\n<sub class=\"tag\">{{ Tags }}</sub>",
                    "scratchPad": 0
                }
            ],
            "type": 0,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.tag {\n  color: white;\n  background-color: #9F2BFF;\n  font-size: 11px;\n  font-weight: bold;\n  padding: 4px;\n  border-radius: 10px;\n  vertical-align: middle;\n}\n",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Text",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Extra",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Computer Science Cloze",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}\n\n<br>\n\n{{Extra}}\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}\n<br /> <br />\n<sub class=\"tag\">{{ Tags }}</sub>",
                    "scratchPad": 0
                }
            ],
            "type": 1,
            "vers": []
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does Dr. Winston W. Royce mean are the two essential steps common to all computer program developments, regardless of size or complexity?",
                "An analysis step following second by a coding step.<br><img src=\"paste-8e998cac5d6e4b989e6bc335e69a1bbb42cb18e7.jpg\">"
            ],
            "flags": 0,
            "guid": "g[VD%QJ6{M",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a linear-sequential life cycle model also reffered to as?&nbsp",
                "The waterfall model"
            ],
            "flags": 0,
            "guid": "wpQp#.PLVK",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the first process model to be introduced?",
                "The waterfall model"
            ],
            "flags": 0,
            "guid": "ArWN_SVBpE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In a waterfall model, what must happen before the next phase can begin?",
                "The previous phase must be completed fully."
            ],
            "flags": 0,
            "guid": "t=NWMhXNGY",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What type of projects is the waterfall model used for?",
                "Projects which are small and there are no uncertain requirements"
            ],
            "flags": 0,
            "guid": "Ee[hksm2YU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the waterfall model, what is considered at the end of each phase?&nbsp;",
                "A review to determine whether the project is on the right path and whether or not to continue or discard the project."
            ],
            "flags": 0,
            "guid": "G{!>up`77~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the waterfall model, do phases overlap?",
                "No, they do not overlap."
            ],
            "flags": 0,
            "guid": "nx*>8jHcXz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the waterfall model, when does software testing start?",
                "After the development is complete."
            ],
            "flags": 0,
            "guid": "iJ)Q!jO3cn",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When did the waterfall model stop being used (primarily)?",
                "It stopped in the year 2000. Even after the Agile manifesto was published in 2001, Waterfall model continued to be used by many organizations till the last decade.&nbsp;"
            ],
            "flags": 0,
            "guid": "HJN)hK*+([",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the olden days, application developed in Waterfall Model would usually take how long to develop?",
                "A year or longer"
            ],
            "flags": 0,
            "guid": "bgO!.Qey_!",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using the waterfall method, why is it very expensive if a failure occurs?",
                "Because we need to update everything from document till the logic."
            ],
            "flags": 0,
            "guid": "qt@th}`2S8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the V-model mean?",
                "Verification and validation model."
            ],
            "flags": 0,
            "guid": "EalkxFvrEX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the V-model what must happen in the previous phase before the next phase begins?",
                "The previous phase must be completed."
            ],
            "flags": 0,
            "guid": "r7)6u4AD.[",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who is credited with having invented the waterfall method?",
                "Dr Winston W. Royce"
            ],
            "flags": 0,
            "guid": "FPj|>E&2)V",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How deep does the system design phase go in the waterfall method?",
                "In theory, all the way down to the design of the classes and functions."
            ],
            "flags": 0,
            "guid": "r%Av=p!<E",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is MOSCOW when talking about priority? ",
                "Must have, should have, could have, won’t have"
            ],
            "flags": 0,
            "guid": "Y~[aCTALf",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a functional requirement and a non-functional requirement?",
                "A functional requirement is something that the user can do, e.g. login, change name etc., A non-functional requirement is on the entire system, e.g. having 99% uptime, having good enough speed etc."
            ],
            "flags": 0,
            "guid": "M-mI/-e({.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is UAT?",
                "User acceptance testing, seeing whether the users accept the project or not"
            ],
            "flags": 0,
            "guid": "ns-{2s@2[Y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Did Dr. Winston W. Royce invent the waterfall model?",
                "No, he made a paper about it, describing what he observed."
            ],
            "flags": 0,
            "guid": "iRS4yhqP}2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the 5 domains of the Cynefin complexity model?",
                "Obvious, complicated, complex, chaotic and disorder."
            ],
            "flags": 0,
            "guid": "t]-kd(r#.a",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the literal translation of Cynefin?",
                "'habitat’ or ‘place’, from Welsh. Actual meaning: place of multiple belongings; cultural, religious, geographic, tribal etc."
            ],
            "flags": 0,
            "guid": "fB?UQ)gN=#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which domain in Cynefin are we in most of the time?",
                "Disorder, the domain where we do not know which other domain we’re in."
            ],
            "flags": 0,
            "guid": "C6TmX7:+|:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is Agile development process-based?",
                "No, it is not. "
            ],
            "flags": 0,
            "guid": "lZGb/6K226",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Agile methods derive much of their agility by what?",
                "Relying on the tacit (implicit) knowledge knowledge embodied in the team, rather than writing the knowledge down in plans."
            ],
            "flags": 0,
            "guid": "oT`N|2Vb>E",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What do the requirements have to be for plan-driven methods to work best? ",
                "Relatively stable, with change rates on the order of one percent per month."
            ],
            "flags": 0,
            "guid": "wo]O(:39/F",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In Cynefin, what are systems on the right side described as? ",
                "Ordered, meaning cause and effect are predictable."
            ],
            "flags": 0,
            "guid": "QVm,eRFuQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In Cynefin, what are systems on the left side described as? ",
                "Unordered, meaning cause and effect are unpredictable"
            ],
            "flags": 0,
            "guid": "iifV#).`tg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How many documentation documents does Royce propose to use? ",
                "To quote: “Quite a lot”"
            ],
            "flags": 0,
            "guid": "q{[E5RouqG",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Why is the border between simple and chaotic different than the others?",
                "Believing you’re in the simple zone might lead you to become overconfident and slide into the chaotic zone. This is why it is often described as a cliff or wave."
            ],
            "flags": 0,
            "guid": "wdF|=Kk*$S",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is simple also called in other versions of Cynefin?",
                "Obvious or Clear"
            ],
            "flags": 0,
            "guid": "o1/$!xsgI=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Scrum is founded on <i>empiricism</i>, which asserts what?",
                "That knowledge comes from experience and making decisions based on what is observed."
            ],
            "flags": 0,
            "guid": "K^5lCu79Yc",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Scrum is founded on <i>lean thinking</i>, which does what?",
                "Reduces waste and focuses on the essentials."
            ],
            "flags": 0,
            "guid": "dP$8B<v)lE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Successful use of Scrum depends on people becoming more proficient in living which five values?",
                "Commitment, focus, openness, respect and courage. "
            ],
            "flags": 0,
            "guid": "D#Rg<|k]jN",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who manages the scrum team?",
                "Themselves, they internally decide who does what, when and how."
            ],
            "flags": 0,
            "guid": "Oh/wqM/3P(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a sprint in scrum?",
                "A sprint is a short, time-boxed period when a scrum team works to complete a set amount of work."
            ],
            "flags": 0,
            "guid": "mDUv6Tefy%",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How large is a scrum team generally?",
                "3-9 people, but can be larger or smaller."
            ],
            "flags": 0,
            "guid": "rL5l_(4x+(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What should scrum teams do if they become too big?",
                "Reorganizing into multiple cohesive Scrum Teams, each focused on the same product."
            ],
            "flags": 0,
            "guid": "Ld@(DN)jn.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In Scrum, who is responsible for all product-related activies?",
                "The Scrum team. This includes stakeholder collaboration, verification, maintenance, operation, experimentation, research and development. "
            ],
            "flags": 0,
            "guid": "nr!TJgC{s^",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In Scrum, who is responsible for the following? <br/> <ul> \n<li>Creating a plan for the Sprint, the Sprint Backlog</li>\n<li>Instilling quality by adhering to a Definition of Done</li>  \n<li>Adapting their plan each day toward the Sprint Goal, and</li>   \n<li>Holding each other accountable as professionals. </li>\n</ul>",
                "The developers."
            ],
            "flags": 0,
            "guid": "t_Us{r}#<r",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who is accountable for maximizing the value of the product resulting from the work of the Scrum Team?",
                "The product owner."
            ],
            "flags": 0,
            "guid": "J>$pw=DY[2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who establishes scrum as defined in the scrum guide?",
                "The scrum master."
            ],
            "flags": 0,
            "guid": "ujZkt*I*#J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In scrum, who is responsible for leading, training and coaching the organization in its Scrum adoption?",
                "The scrum master."
            ],
            "flags": 0,
            "guid": "wnPQsGGc,t",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In scrum, who is responsible for helping the scrum team understand the need for clear and concise product backlog items?",
                "The scrum master."
            ],
            "flags": 0,
            "guid": "C{.TOx]*o8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How long are sprints in Scrum?",
                "Fixed length of one month or less."
            ],
            "flags": 0,
            "guid": "icTYQ%fZIS",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When does a new sprint begin in Scrum?",
                "Immediately after the conclusion of the previous sprint."
            ],
            "flags": 0,
            "guid": "n1:]q33{2J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In Scrum, which topics are addressed during sprint planning?",
                "Why the Sprint is valuable, what can be Done this Sprint and How will the chosen work get done?"
            ],
            "flags": 0,
            "guid": "o<Vhq^zUeL",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Daily Scrum?",
                "A 15-minute event for the Developers of the Scrum team, which focuses on progress toward the Sprint Goal and produces and actionable plan for the next day of work."
            ],
            "flags": 0,
            "guid": "L`fM!P=txZ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the purpose of the Sprint Retrospective in Scrum?",
                "To plan ways to increase quality and effectiveness."
            ],
            "flags": 0,
            "guid": "kGg;X<.E<Z",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the product backlog in Scrum?",
                "An emergent, ordered list of what is needed to improve the product."
            ],
            "flags": 0,
            "guid": "s^ogIro`cd",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the Sprint Backlog composed of in Scrum?",
                "The Sprint Goal (why), the set of Product Backlog items selected for the Sprint (what), as well as an actionable plan for delivering the Increment (how)"
            ],
            "flags": 0,
            "guid": "KORIE<]*KW",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an Increment in Scrum?",
                "A concrete stepping stone toward the Product Goal."
            ],
            "flags": 0,
            "guid": "dI}fx%Tuv=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens when a Product Backlog item meets the definition of Done in Scrum?",
                "An Increment is born."
            ],
            "flags": 0,
            "guid": "o01rjR#&9{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is MVP short for?",
                "Minimum viable product"
            ],
            "flags": 0,
            "guid": "fBaZ_{6y4Y",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who uses the MVP version of a product?",
                "Early customers who can then provide feedback for future product development"
            ],
            "flags": 0,
            "guid": "N56<<8x4sQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Big Bang delivery?",
                "Building the thing until 100% done, and delivering at the end."
            ],
            "flags": 0,
            "guid": "zBE6rb%)eP",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is Earlist Testable Product also called? ",
                "Minimum Viable Product, MVP"
            ],
            "flags": 0,
            "guid": "fA!X(tS%.?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "These days most projects follow&nbsp;{{c1::Agile Methodology::method}}, some form of&nbsp;{{c2::Iterative model::model}} or one of the other models depending on their project specific requirement.&nbsp;",
                "Up untill the year 2000 the waterfall model was used significantly."
            ],
            "flags": 0,
            "guid": "$KKJNAwK)",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Just like the waterfall model, the V-shaped life cycle is a&nbsp;{{c1::sequential}} path of exeuction of processes.",
                "Also like the waterfall model, each phase must be completed before the next phase begins."
            ],
            "flags": 0,
            "guid": "CB2?nAsbYE",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the V-model, testing of the product is planned&nbsp;{{c1::in parallel}} with a corresponding phase of development.",
                "For example Business Requirement Specifications and  Acceptance testing"
            ],
            "flags": 0,
            "guid": "kn]PDV+6U=",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The developers of several emerging software development methods, such as Adaptive Software Development (ASD), Agile Modeling, Crystal Methods, Dynamic System Development Methodology (DSDM), Extreme Programming (XP), Feature Driven Development, Lean Development, and Scrum Emphasize the following values: <br/>\n<ul>\n   <li>{{c1::Individuals and interactions}} over processes and tools</li>\n<li>{{c2::Working software}} over comprehensive documentation</li>\n<li>{{c3::Customer collaboration}} over contract negotiation</li>\n<li>{{c4::Responding to change}} over following a plan</li>\n</ul>",
                "."
            ],
            "flags": 0,
            "guid": "OAmB)]x%Dc",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture2",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Marty Cagan defines minimum viable product as the smallest possible product that has three critical characteristics: {{c1::People choose to use it or buy it}}, {{c2::people can figure out how to use it;}} and {{c3::we can deliver it when we need it with the resources available}}, also known as: {{c4::valuable, usable and feasible}}",
                "."
            ],
            "flags": 0,
            "guid": "zMdp5~I-/l",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture3",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which rule? <br/>\nSuppose that a procedure can be broken down into a sequence of two tasks. If there are \\(n_1\\) ways to do the first task and for each of these ways of doing the first task, there are \\(n_2\\) ways to do the second task, then there are \\(n_1n_2\\)  ways to do the procedure. ",
                "The Product Rule"
            ],
            "flags": 0,
            "guid": "gYY?+6dLpm",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which rule?  <br/>\nIf a task can be done either in one of \\(n_1\\) ways or in one of \\(n_2\\) ways, where none of the set of \\(n_1\\) ways is the same as any of the set of \\(n_2\\) ways, then there are \\(n_1 + n_2\\) ways to do the task.",
                "The Sum Rule"
            ],
            "flags": 0,
            "guid": "c]ivo]sYYN",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which rule?   <br/>\nIf a task can be done in either  \\(n_1\\) ways or \\(n_2\\) ways, then the number of ways to do the task is \\(n_1+n_2\\) minus the number of ways to do the task that are common to the two different ways.",
                "The Substraction Rule"
            ],
            "flags": 0,
            "guid": "EHqr0&RDpn",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which rule is also known as the principle of inclusion-exclusion?",
                "The Substraction Rule"
            ],
            "flags": 0,
            "guid": "tDGa4bO6qI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of what rule?<br/>\nThere are \\(n/d\\) ways to do a task if it can be done using a procedure that can be carried out in \\(n\\) ways, and for every way \\(w\\), exactly \\(d\\) of the \\(n\\) ways correspond to way \\(w\\)",
                "The Division Rule"
            ],
            "flags": 0,
            "guid": "G`lP^MRiC)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does a tree (from tree diagrams) consist of?",
                "A root, a number of banrches leaving the root, and possible additional branches leaving the endpoints of other branches."
            ],
            "flags": 0,
            "guid": "h8kY7-30>r",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a sequence called strictly decreasing?",
                "If each term is smaller than the one that precedes it."
            ],
            "flags": 0,
            "guid": "GMn)WmQ$P",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a sequence called strictly increasing?",
                "If each term is larger than the one that precedes it"
            ],
            "flags": 0,
            "guid": "Cqa%dB@4qU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which principle?<br/>\nIf \\(N\\) objects are placed into \\(k\\) boxes, then there is at least one box containing at least \\([N/k]\\) objects.",
                "The Generalized Pigeonhole Principle"
            ],
            "flags": 0,
            "guid": "fIAGGGh_X6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which principle is also called the Dirichlet drawer principle?",
                "The Pigeonhole Principle"
            ],
            "flags": 0,
            "guid": "O8(4C%QlC+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which principle?<br/>\nIf \\(k\\) is a positive integer and \\(k + 1\\) or more objects are placed into \\(k\\) boxes, then there is a tleast one box containing two or more objects.",
                "The Pigeonhole Principle"
            ],
            "flags": 0,
            "guid": "BCY+@a#2X|",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is <i>P(n,r)</i>",
                "The number of <i>r</i>-permutations of a set with <i>n</i> elements"
            ],
            "flags": 0,
            "guid": "gX&uwX=_97",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the equation of <i>P(n,r)</i> if <i>n</i> and <i>r</i> are integers with \\(0 \\leq r \\leq n\\)?",
                "\\(P(n,r) = \\frac{n!}{(n-r)!}\\)"
            ],
            "flags": 0,
            "guid": "M]zM&QY+p7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an <b>r-combination</b> of elements of a set?",
                "An unordered selection of <i>r</i> elements from the set. Thus, an <i>r</i>-combination is simply a subset of the set with <i>r</i> elements."
            ],
            "flags": 0,
            "guid": "w]uB.jxD1R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is denoted by \\(C(n,r)\\) or \\(\\binom{n}{r}\\)?",
                "The number of <i>r</i>-combinations of a set with <i>n</i> distinct elements"
            ],
            "flags": 0,
            "guid": "c-N@=f[=uY",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The number of r-combinations of a set with n elements, where n is a nonnegative integer and r is an integer with \\(0 \\leq r \\leq n\\) equals what?",
                "\\(C(n,r) = \\frac{n!}{r!(n-r)!}\\)"
            ],
            "flags": 0,
            "guid": "L=)LOK4UIo",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between r-permutations and r-combinations?",
                "While r-permutations do take into account the order, r-combinations are independent of it. Therefore, permutation is considered to be an ordered combination."
            ],
            "flags": 0,
            "guid": "Ds+v:r~[ui",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <b>binomial expression</b>?",
                "The sum of two terms, such as \\(x + y\\) (The terms can be products of constants and variable)."
            ],
            "flags": 0,
            "guid": "C9.ZWBowD_",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::4",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the following equation? <br> \\( (x+y)^n ) \\sum_{j=0}^n \\binom{n}{j} x^{n-j}y^j = \\binom{n}{0}x^n + \\binom{n}{1}x^{n-1}+...+\\binom{n}{n-1}xy^{n-1}+\\binom{n}{n}y^n \\)",
                "The Binomial Theorem"
            ],
            "flags": 0,
            "guid": "rC+j|F>pd:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::4",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the result of the following equation, when <i>n</i> is a nonnegative integer? <br/> \\( \\sum^n_{k=0} \\binom{n}{k} = ? \\)",
                " \\( \\sum^n_{k=0} \\binom{n}{k} = 2^n \\)"
            ],
            "flags": 0,
            "guid": "P~%t`m@PVp",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::4",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the result of the following equation, when <i>n</i> is a positive integer? <br/> \\( \\sum^n_{k=0}(-1)^k \\binom{n}{k} = ? \\)",
                " \\( \\sum^n_{k=0}(-1)^k \\binom{n}{k} = 0 \\)"
            ],
            "flags": 0,
            "guid": "c0./HAvH.}",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::4",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the result of the following equation, when <i>n</i> is a nonnegative integer? <br/> \\( \\sum^n_{k=0}2^k \\binom{n}{k} = ? \\)",
                " \\( \\sum^n_{k=0}2^k \\binom{n}{k} = 3^n\\)"
            ],
            "flags": 0,
            "guid": "HX4gD5Be(K",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::4",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the following theorem? Let <i>n</i> and <i>k</i> be positive integers with \\(n \\geq k\\). Then <br> \\(\\binom{n+1}{k}=\\binom{n}{k-1}+\\binom{n}{k}\\)",
                "Pascal’s Identity."
            ],
            "flags": 0,
            "guid": "I<$AQ%)k2c",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::4",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Who is Pascal’s triangle named after?",
                "The French mathematician Blaise Pascal."
            ],
            "flags": 0,
            "guid": "FS:7PFzOcj",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::4",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the following theorem? Let <i>m, n,</i> and <i>r</i> be nonnegative integers with <i>r</i> not exceeding either <i>m</i> or </i>n</i>. Then <br> \\(\\binom{m+n}{r} = \\sum^r_{k=0} \\binom{m}{r-k} \\binom{n}{k} \\)",
                "Vandermonde’s Identity."
            ],
            "flags": 0,
            "guid": "ogJ&LTzUS!",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::4",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the number of \\(r\\)-permutations of a set of <i>n</i> objects with repetition allowed?",
                "\\(n^r\\)"
            ],
            "flags": 0,
            "guid": "whwHcyfeaF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::5",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How many r-combinations from a set with <i>n</i> elements are there <i>when repetition of elements is allowed</i>?",
                "\\( C(n+r-1,r) = (C(n+r-1,n-1) \\) <i>r</i>-combinations"
            ],
            "flags": 0,
            "guid": "i&W`~joJZQ",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::5",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the number of different permutations of <i>n</i> objects, where there are \\(n_1\\) indistinguishable objects of type 1, \\(n_2\\) indistinguishable objects of type 2, …, and \\(n_k\\) indistinguishable objects of type <i>k</i>?",
                "\\(\\frac{n!}{n_1!n_2!...n_k!}\\)"
            ],
            "flags": 0,
            "guid": "Jc1M9+mZJg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::5",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <b>closed formula</b>?",
                "An expression that can be evaluated using a finite number of operations and that includes numbers, variables and values of functions, where the operations and functions belong to a generally accepted set that can depend on the context."
            ],
            "flags": 0,
            "guid": "C<AJ3o:._v",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::5",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the number of ways to distribute <i>n</i> distinguishable objects into <i>k</i> distinguishable boxes so that \\(n_i\\) objects are placed into box \\(i, I = 1, 2, …, k\\)?",
                "\\(\\frac{n!}{n_1!n_2!...n_k!}\\)"
            ],
            "flags": 0,
            "guid": "v>e|v$%9M8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::5",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::permutation}} of a set of distinct objects is an ordered arrangement of these objects.",
                "."
            ],
            "flags": 0,
            "guid": "t`UYj88/0P",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "An ordered arrangement of <i>r</i> elements of a set is called an {{c1::r-permutation}}",
                "."
            ],
            "flags": 0,
            "guid": "wgsP|mK@fN",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::combinatorial proof}} of an identity is a proof that uses counting arguments to prove that both sides of the identity count the same objects but in different ways or a proof that is based on showing that there is a bijection between the sets of objects counted by the two sides of the identity. These two types of proofs are called {{c2::double counting proofs}} and {{c2::bijective proofs}}, respectively.",
                "."
            ],
            "flags": 0,
            "guid": "xxM[|/tFNr",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3",
                "CS::algorithms-and-probability"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the objective in complexity theory?",
                "To classify problems as easy ones, and hard ones."
            ],
            "flags": 0,
            "guid": "Q_2eYRtMa<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the objective in computability theory?",
                "To classify problems as solvable and not solvable."
            ],
            "flags": 0,
            "guid": "ztAEyk8rB#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a sequence of objects?",
                "A list of the objects in some order."
            ],
            "flags": 0,
            "guid": "f#wtD/5_k0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a binary relation?",
                "A relation whose domain is a set of pairs"
            ],
            "flags": 0,
            "guid": "v[l3H_Z,ky",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an argument in an function?",
                "An input to a function"
            ],
            "flags": 0,
            "guid": "Oq`d39reCC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an alphabet?",
                "A finite, nonempty set of objects called symbols, symbolized by \\(\\Sigma \\)"
            ],
            "flags": 0,
            "guid": "FX%0:N|3UF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the string of length zero called?",
                "The empty string, written \\(\\epsilon\\)"
            ],
            "flags": 0,
            "guid": "s7hJTyXUQM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <i>predicate</i> or <i>property</i> function?",
                "A function whose range is \\({TRUE,FALSE}\\)"
            ],
            "flags": 0,
            "guid": "Ko3TqY|HkE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does <i>D</i> and <i>R</i> signify in \\(f: D \\to R\\)?",
                "Domain and Range"
            ],
            "flags": 0,
            "guid": "qD5pqUyjY",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The outputs of a function come from a set called what?",
                "Its <i>range</i>"
            ],
            "flags": 0,
            "guid": "g!!}_LSkPg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the set of possible inputs to a function called?",
                "Its <i>domain</i>."
            ],
            "flags": 0,
            "guid": "Df-`j|P{Uc",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a power set of A?",
                "The set of all subsets of A"
            ],
            "flags": 0,
            "guid": "v1LyOi)zr.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a 2-tuple also called?",
                "An ordered pair"
            ],
            "flags": 0,
            "guid": "q.OZmyE/|1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does repetition matter in a sequence?",
                "No"
            ],
            "flags": 0,
            "guid": "M39y^|u%1g",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <i>multiset</i>?",
                "A modification of the concept of a set that, unlike a set,  allows for multiple instances for each of its elements. "
            ],
            "flags": 0,
            "guid": "k./ll:7c(e",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is A a <i>proper subset</i> of B?",
                "When A is a subset of B and not equal to B."
            ],
            "flags": 0,
            "guid": "dAwyH1eR>R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a computational model?",
                "An idealized computer"
            ],
            "flags": 0,
            "guid": "wzRBot:Raz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What language does a machine that takes no strings recognize?",
                "The empty language \\(\\emptyset\\)"
            ],
            "flags": 0,
            "guid": "iP<+,6_9eO",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Let \\(N = \\{1,2,3,...\\}\\) be the set of natural numbers, what does it mean when we say that \\(N\\) is <i>closed under multiplication</i>?",
                "For any <i>x</i> and <i>y</i> in \\(N\\), the product \\(x \\times y\\) also is in \\(N\\),"
            ],
            "flags": 0,
            "guid": "D,rG*Y6WDI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which regular operation outputs (some) of the following with A = {good, bad}? <br/> {?, good, bad, goodgood, goodbad, badgood, badbad, goodgoodgood, goodgoodbad, goodbadgood, goodbadbad, . . . }",
                "The regular operation <b>star</b>."
            ],
            "flags": 0,
            "guid": "nmDPk>_~e3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a unary operation and a binary operation?",
                "A unary operation performs an action with a single operand. Binary operations perform actions with two operands. "
            ],
            "flags": 0,
            "guid": "qg8gh$LZg-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The regular operation <b>Star</b> is defined as such: \\(A* = \\{x_1x_2...x_k | k \\geq 0 and each x_i \\in A\\}\\). <br/> What does this function do in simple terms?",
                "The star operation is a unary operation that works by attaching any number of strings in A together to get a string in the new language. "
            ],
            "flags": 0,
            "guid": "tF5dhih?(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The regular operation <b>Concatenation</b> is defined as such: \\(A \\circ B = \\{xy | x \\in A and y \\in B\\}\\). <br/> What does this function do in simple terms?",
                "It attaches a string from A in front of a string from B in all possible ways to get the strings in the new language. "
            ],
            "flags": 0,
            "guid": "x&<V~3oDU-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When do we say that a language is a <b>regular language</b>?",
                "If some finite automaton recognizes it"
            ],
            "flags": 0,
            "guid": "BXY|<Temd",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does L(M) = A mean?",
                "Machine M recognizes a set of strings A, also called language A"
            ],
            "flags": 0,
            "guid": "O+~wri8>>s",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean if a collection of objects is <i>closed</i> under some operation?",
                "If applying that operation to members of the collection returns an object still in the collection "
            ],
            "flags": 0,
            "guid": "GKq6s+t=%d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Final states are another way of saying what?",
                "Accept states"
            ],
            "flags": 0,
            "guid": "J8JMNoQQct",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the probabilistic counterpart of finite automata?",
                "Markov Chains"
            ],
            "flags": 0,
            "guid": "LUefC7iW9U",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What kind of computers are finite automata good for?",
                "Computers with limited memory"
            ],
            "flags": 0,
            "guid": "e{MjqI>W)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is deterministic computation?",
                "When a machine is in a given state and reads the next input symbol, we know what the next state will be."
            ],
            "flags": 0,
            "guid": "vzw~_-`3:D",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does an NFA do if there are multiply paths with the same input?",
                "Splits into multiple copies of itself and follows all the possibiliites in parallel. If there are more choices, it splits again, if it can’t go further, it is destroyed. If <i>any</i> of these copies of the machine is in an accept state at the end of the input, the NFA accepts the input string."
            ],
            "flags": 0,
            "guid": "nSQC+a]DS:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens if a state with an \\(\\epsilon\\) symbol on an exiting arrow is encountered?",
                "Without reading any input, the machine splits into multiple copies, one following each of the exiting \\(\\epsilon\\)-labeled arrows, and one staying at the current state. Then the machine proceeds nondeterministically as before."
            ],
            "flags": 0,
            "guid": "bT$u9+Ed)H",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a DFA?",
                "A deterministic finite automaton"
            ],
            "flags": 0,
            "guid": "d#Ci1gjBC{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an NFA?",
                "A nondeterministic finite automaton"
            ],
            "flags": 0,
            "guid": "`IO1*.2Bd",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an alphabet containing only one symbol called?",
                "A unary alphabet"
            ],
            "flags": 0,
            "guid": "i~K,2u9O<:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the one essential difference between the formal definition of a deterministic finite automaton and a nondeterministic finite automaton?",
                "They differ in the type of transifion function. In a DFA, the transition function takes a state and an input symbol and produces the next state. In an NFA, the transition function takes a state and an input symbol <i>or the empty string</i> and produces <i>the set of possible next states</i>"
            ],
            "flags": 0,
            "guid": "yV*3/UC|)`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What languages do NFAs recognize, that DFAs do not?",
                "None, they both recognize the same class of languages."
            ],
            "flags": 0,
            "guid": "nj]#sRaGg,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which NFAs can be converted into an equivalent DFA?",
                "Every NFA can be converted into an equivalent DFA."
            ],
            "flags": 0,
            "guid": "s#nAR6ZR{J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a language regular?",
                "If and only if some nondeterministic finite automaton recognizes it."
            ],
            "flags": 0,
            "guid": "r2q6Me1Bdt",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is data discovery?",
                "The process of finding data on which transformations will be made."
            ],
            "flags": 0,
            "guid": "F!0Hi%2G~x",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is data mapping?",
                "The process of mapping some data to other."
            ],
            "flags": 0,
            "guid": "NLUlKDcGuV",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the resulting language of the regular expression \\((0\\cup 1)0*\\)?",
                "The language consisting of all strings starting with a 0 or a 1 followed by any number of 0s."
            ],
            "flags": 0,
            "guid": "i)]ZZ@x<z4",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The regular expression \\((0\\cup 1)0*\\) is shorthand for what? ",
                "\\((0\\cup 1)\\circ 0*\\)"
            ],
            "flags": 0,
            "guid": "fG+D+Iv#]a",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which is more powerful, finite automata or regular expressions?",
                "They are equivalent in their descriptive power."
            ],
            "flags": 0,
            "guid": "BF.N5=y8Hr",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Is a language necessarily regular if it is described by a regular expression?",
                "Yes, a language is regular if and only if some regular expression describes it."
            ],
            "flags": 0,
            "guid": "Os4k]=WQV@",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is GNFA short for?",
                "Generalized nondeterministic finite automaton"
            ],
            "flags": 0,
            "guid": "GS8Nq&>b,=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What can GNFAs do, that NFAs and DFAs can’t do?",
                "Use regular expressions in their transitional arrows."
            ],
            "flags": 0,
            "guid": "pjF<33gd}D",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which kind of finite automaton has the transition function \\(\\delta : (Q - \\{q_{accept}\\ \\times (Q-\\{q_{start}\\}) \\rightarrow R)\\)?",
                "NDFAs"
            ],
            "flags": 0,
            "guid": "BFGNq}$#Xj",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the formal definition of a <i>finite automaton</i>?",
                "A 5-tuple \\( (Q, \\Sigma, \\delta, q_0, F) \\)"
            ],
            "flags": 0,
            "guid": "z,T/aL:Jf/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If two languages A1 and A2 are regular, what can be said of their union A1 \\(\\cup \\) A2?",
                "Their union is also regular, because regular languages are closed under the union operation"
            ],
            "flags": 0,
            "guid": "lKu/,D8kqe",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When are two machines considered equivalent?",
                "If they recognize the same language"
            ],
            "flags": 0,
            "guid": "i*L@jnve:2",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a regular expression?",
                "An expression describing a language that is built using regular operations."
            ],
            "flags": 0,
            "guid": "q`Oz:hG~`-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the regular expression \\( (0 \\cup 1) \\) mean?",
                "Combine the results of {0} and {1} into one set, {0,1}"
            ],
            "flags": 0,
            "guid": "rs[4Hn4dd,",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the regular expression \\( (0 \\cup 1)* \\) mean?",
                "It is the expression for the language consisting of all possible strings of 0’s and 1’s"
            ],
            "flags": 0,
            "guid": "rLL^bB~XL~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the symbol \\(\\Sigma *\\) mean?",
                "The language consisting of all strings over a given alphabet."
            ],
            "flags": 0,
            "guid": "{#dZkawc/",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the following regular expression denote? \\((0 \\Sigma *) \\cup (\\Sigma * 1)\\)",
                "It consists of all possible strings that start with a 0, or end with a 1."
            ],
            "flags": 0,
            "guid": "x(lwQZ>UN=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is R+ shorthand for?",
                "R+ is the kleene star with at least one element, not \\(\\epsilon\\) (i.e. R+ = RR*)"
            ],
            "flags": 0,
            "guid": "H1pSyI/!$d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "How many acceptance states should a finite automaton have?",
                "A finite automaton has a set of starting states, which may be any set of states, including the set \\(\\emptyset\\)."
            ],
            "flags": 0,
            "guid": "I5[nnxy=g~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the set of acceptance states for the following DFA? <br/> <img src=\"dfa1.png\">",
                "{q3}"
            ],
            "flags": 0,
            "guid": "f-(P?nJ3^C",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between the <i>empty string</i> and the <i>empty language</i>?",
                "The empty string \\((\\epsilon )\\) is the string of length 0, while the empty language \\((\\emptyset )\\), is the language which is a set with no strings. "
            ],
            "flags": 0,
            "guid": "f-?jR2Vtu?",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Can you use star operation on the empty string (\\(\\epsilon\\))?",
                "Yes."
            ],
            "flags": 0,
            "guid": "hP@)&gF!zd",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is tabular data?",
                "Data that can be encoded as text files using a designated seperator character between fields and newline between two records."
            ],
            "flags": 0,
            "guid": "Q#ACA)rg^B",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Header records may be found in tabular data formats, what are they?",
                "A first line specifying the names of the different fields"
            ],
            "flags": 0,
            "guid": "p-_d<{*@~`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Where can you find information about different command-line tools?",
                "Via the man-pages, e.g. man grep. Many tools also have online manuals or tutorials and books."
            ],
            "flags": 0,
            "guid": "nW<l1PiZ]`",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is grep short for?",
                "Global regular expression print"
            ],
            "flags": 0,
            "guid": "q9>SED@u9u",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the -E option in grep do?",
                "With -E basically all characters that have special meaning are unescaped, meaning when using -E regular expressions are often more readable."
            ],
            "flags": 0,
            "guid": "E@+r~y_Z3J",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>sort</i> tool do?",
                "Sort input"
            ],
            "flags": 0,
            "guid": "trh{G5|)[%",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>uniq</i> command do?",
                "Filter out adjacent matching lines, often used after sort"
            ],
            "flags": 0,
            "guid": "rOQB_LQ=a=",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>tr</i> tool do?",
                "Translate or delete characters."
            ],
            "flags": 0,
            "guid": "tH$8A&&5Rw",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>cut</i> tool do?",
                "Remove sections from each line of files"
            ],
            "flags": 0,
            "guid": "hCX>.!RBCK",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>paste</i> tool do?",
                "Merge lines of files"
            ],
            "flags": 0,
            "guid": "O@QlFm;S9:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>join</i> tool do?",
                "Join lines of two files on a common (sorted) field"
            ],
            "flags": 0,
            "guid": "uJUeb>U_Wr",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the <i>head/tail</i> command do?",
                "Output the first/last part of files"
            ],
            "flags": 0,
            "guid": "Vd%|Hi2(w",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::5",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The front end of the compiler phases (Scanner -> Parser -> Symbol Collection -> Type Checking) ensure what? ",
                "That the input program is correct"
            ],
            "flags": 0,
            "guid": "P+iQftWh@M",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::6",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the back end of the compiler phases (Code Generation -> Emit) do?",
                "Generate the code for the correct input program (i.e. target code)"
            ],
            "flags": 0,
            "guid": "B,}WcjI(mv",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::6",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When can optimization phases be inserted in the compiler phases?",
                "Before or after the code generation (the back end)"
            ],
            "flags": 0,
            "guid": "isoLG/o14C",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::6",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the input and output of the lexical analysis scanners?",
                "The input is a stream of characters (the user program), the output is a stream of tokens."
            ],
            "flags": 0,
            "guid": "G7C9zp+PaH",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::6",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A mathematical model of computation called {{c1::<i>finite automaton</i>}} is used in text processing, compilers, and hardware design.",
                "."
            ],
            "flags": 0,
            "guid": "B%V8>GmTn.",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A mathematical model of computation called {{c1::<i>context-free grammar</i>}} is used in programming languages and artificial intelligence.",
                "."
            ],
            "flags": 0,
            "guid": "Qhk_*yic><",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "{{c1::<b>Definitions</b>}} describe the objects and notions that we use.",
                "."
            ],
            "flags": 0,
            "guid": "G`}m<As>#e",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::proof}} is a convincing logical argument that a statement is true.",
                "."
            ],
            "flags": 0,
            "guid": "c8#w0zyPQ!",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::theorem}} is a mathematical statement proved true.",
                "."
            ],
            "flags": 0,
            "guid": "ei2!aRnw|{",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A<i>finite automaton</i> is a 5-tuple (\\(Q, \\sum , \\delta , q_o, F\\)), where <br/>\n1. \\(Q\\) is a finite set called the {{c1::<b>states</b>}}, <br/>\n2. \\(\\sum \\) is a finite set called the {{c2::<b>alphabe</b>t}}, <br/>\n3. \\(\\delta : Q \\times \\sum \\to Q\\) is the {{c3::<b>transition function</b>}} <br/>\n4. \\(q_0 \\in Q\\) is the {{c4::<b>start state</b>}}, and <br/>\n5. \\(F \\subseteq Q\\) is the {{c5::<b>set of accept states</b>}}",
                "."
            ],
            "flags": 0,
            "guid": "I*/2/V]/dI",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If A is the set of all strings that machine M accepts, we say that A is the <b>{{c1::language}} of machine M</b>.",
                "."
            ],
            "flags": 0,
            "guid": "k6237l)h2P",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1",
                "CS::formal-languages"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The natural steps in a data transformation process are {{c1::data discovery}} -> {{c2::data mapping}}  -> {{c3::code generation}} -> {{c4::code execution}} -> -> {{c5::data review}}.",
                "."
            ],
            "flags": 0,
            "guid": "w_^I=PHtJ6",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Slides::4"
            ]
        }
    ]
}