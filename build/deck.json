{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "166016b4-17ea-11ed-ba04-40b076444a23",
    "deck_config_uuid": "539b82a0-a514-11ec-b44f-acde48001122",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "539b82a0-a514-11ec-b44f-acde48001122",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Computer Science",
            "new": {
                "bury": true,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 0,
                "perDay": 10,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": true,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 100
            },
            "reviewOrder": 0,
            "timer": 1
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [
        "paste-8e998cac5d6e4b989e6bc335e69a1bbb42cb18e7.jpg"
    ],
    "name": "Computer Science",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.tag {\n  color: white;\n  background-color: #9F2BFF;\n  font-size: 11px;\n  font-weight: bold;\n  padding: 4px;\n  border-radius: 10px;\n  vertical-align: middle;\n}\n\npre {\n  font-family: monospace;\n  font-size: 12px;\n  text-align: left;\n  color: black;\n  background-color: #F0F0F0;\n  border: 1px solid #CCC;\n}\n",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Front",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Back",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Computer Science Basic",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Front",
                    "ord": 0,
                    "qfmt": "{{Front}}\n<br /> <br />\n<sub class=\"tag\">{{ Tags }}</sub>",
                    "scratchPad": 0
                }
            ],
            "type": 0,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}\n\n.tag {\n  color: white;\n  background-color: #9F2BFF;\n  font-size: 11px;\n  font-weight: bold;\n  padding: 4px;\n  border-radius: 10px;\n  vertical-align: middle;\n}\n",
            "flds": [
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Text",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "media": [],
                    "name": "Extra",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Computer Science Cloze",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}\n\n<br>\n\n{{Extra}}\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}\n<br /> <br />\n<sub class=\"tag\">{{ Tags }}</sub>",
                    "scratchPad": 0
                }
            ],
            "type": 1,
            "vers": []
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does Dr. Winston W. Royce mean are the two essential steps common to all computer program developments, regardless of size or complexity?",
                "An analysis step following second by a coding step.<br><img src=\"paste-8e998cac5d6e4b989e6bc335e69a1bbb42cb18e7.jpg\">"
            ],
            "flags": 0,
            "guid": "g[VD%QJ6{M",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a linear-sequential life cycle model also reffered to as?&nbsp",
                "The waterfall model"
            ],
            "flags": 0,
            "guid": "wpQp#.PLVK",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What was the first process model to be introduced?",
                "The waterfall model"
            ],
            "flags": 0,
            "guid": "ArWN_SVBpE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In a waterfall model, what must happen before the next phase can begin?",
                "The previous phase must be completed fully."
            ],
            "flags": 0,
            "guid": "t=NWMhXNGY",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What type of projects is the waterfall model used for?",
                "Projects which are small and there are no uncertain requirements"
            ],
            "flags": 0,
            "guid": "Ee[hksm2YU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the waterfall model, what is considered at the end of each phase?&nbsp;",
                "A review to determine whether the project is on the right path and whether or not to continue or discard the project."
            ],
            "flags": 0,
            "guid": "G{!>up`77~",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the waterfall model, do phases overlap?",
                "No, they do not overlap."
            ],
            "flags": 0,
            "guid": "nx*>8jHcXz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the waterfall model, when does software testing start?",
                "After the development is complete."
            ],
            "flags": 0,
            "guid": "iJ)Q!jO3cn",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When did the waterfall model stop being used (primarily)?",
                "It stopped in the year 2000. Even after the Agile manifesto was published in 2001, Waterfall model continued to be used by many organizations till the last decade.&nbsp;"
            ],
            "flags": 0,
            "guid": "HJN)hK*+([",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the olden days, application developed in Waterfall Model would usually take how long to develop?",
                "A year or longer"
            ],
            "flags": 0,
            "guid": "bgO!.Qey_!",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Using the waterfall method, why is it very expensive if a failure occurs?",
                "Because we need to update everything from document till the logic."
            ],
            "flags": 0,
            "guid": "qt@th}`2S8",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does the V-model mean?",
                "Verification and validation model."
            ],
            "flags": 0,
            "guid": "EalkxFvrEX",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the V-model what must happen in the previous phase before the next phase begins?",
                "The previous phase must be completed."
            ],
            "flags": 0,
            "guid": "r7)6u4AD.[",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "These days most projects follow&nbsp;{{c1::Agile Methodology::method}}, some form of&nbsp;{{c2::Iterative model::model}} or one of the other models depending on their project specific requirement.&nbsp;",
                "Up untill the year 2000 the waterfall model was used significantly."
            ],
            "flags": 0,
            "guid": "$KKJNAwK)",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Just like the waterfall model, the V-shaped life cycle is a&nbsp;{{c1::sequential}} path of exeuction of processes.",
                "Also like the waterfall model, each phase must be completed before the next phase begins."
            ],
            "flags": 0,
            "guid": "CB2?nAsbYE",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM571::Lecture1",
                "CS::software-engineering"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "In the V-model, testing of the product is planned&nbsp;{{c1::in parallel}} with a corresponding phase of development.",
                "For example Business Requirement Specifications -&gt"
            ],
            "flags": 0,
            "guid": "kn]PDV+6U=",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "Acceptance",
                "testing"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which rule? <br/>\nSuppose that a procedure can be broken down into a sequence of two tasks. If there are \\(n_1\\) ways to do the first task and for each of these ways of doing the first task, there are \\(n_2\\) ways to do the second task, then there are \\(n_1n_2\\)  ways to do the procedure. ",
                "The Product Rule"
            ],
            "flags": 0,
            "guid": "gYY?+6dLpm",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which rule?  <br/>\nIf a task can be done either in one of \\(n_1\\) ways or in one of \\(n_2\\) ways, where none of the set of \\(n_1\\) ways is the same as any of the set of \\(n_2\\) ways, then there are \\(n_1 + n_2\\) ways to do the task.",
                "The Sum Rule"
            ],
            "flags": 0,
            "guid": "c]ivo]sYYN",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which rule?   <br/>\nIf a task can be done in either  \\(n_1\\) ways or \\(n_2\\) ways, then the number of ways to do the task is \\(n_1+n_2\\) minus the number of ways to do the task that are common to the two different ways.",
                "The Substraction Rule"
            ],
            "flags": 0,
            "guid": "EHqr0&RDpn",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which rule is also known as the principle of inclusion-exclusion?",
                "The Substraction Rule"
            ],
            "flags": 0,
            "guid": "tDGa4bO6qI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of what rule?<br/>\nThere are \\(n/d\\) ways to do a task if it can be done using a procedure that can be carried out in \\(n\\) ways, and for every way \\(w\\), exactly \\(d\\) of the \\(n\\) ways correspond to way \\(w\\)",
                "The Division Rule"
            ],
            "flags": 0,
            "guid": "G`lP^MRiC)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does a tree (from tree diagrams) consist of?",
                "A root, a number of banrches leaving the root, and possible additional branches leaving the endpoints of other branches."
            ],
            "flags": 0,
            "guid": "h8kY7-30>r",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which principle?<br/>\nIf \\(k\\) is a positive integer and \\(k + 1\\) or more objects are placed into \\(k\\) boxes, then there is a tleast one box containing two or more objects.",
                "The Pigeonhole Principle"
            ],
            "flags": 0,
            "guid": "BCY+@a#2X|",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which principle is also called the Dirichlet drawer principle?",
                "The Pigeonhole Principle"
            ],
            "flags": 0,
            "guid": "O8(4C%QlC+",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The following is the definition of which principle?<br/>\nIf \\(N\\) objects are placed into \\(k\\) boxes, then there is at least one box containing at least \\([N/k]\\) objects.",
                "The Generalized Pigeonhole Principle"
            ],
            "flags": 0,
            "guid": "fIAGGGh_X6",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a sequence called strictly increasing?",
                "If each term is larger than the one that precedes it"
            ],
            "flags": 0,
            "guid": "Cqa%dB@4qU",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is a sequence called strictly decreasing?",
                "If each term is smaller than the one that precedes it."
            ],
            "flags": 0,
            "guid": "GMn)WmQ$P",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is <i>P(n,r)</i>",
                "The number of <i>r</i>-permutations of a set with <i>n</i> elements"
            ],
            "flags": 0,
            "guid": "gX&uwX=_97",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the equation of <i>P(n,r)</i> if <i>n</i> and <i>r</i> are integers with \\(0 \\leq r \\leq n\\)?",
                "\\(P(n,r) = \\frac{n!}{(n-r)!}\\)"
            ],
            "flags": 0,
            "guid": "M]zM&QY+p7",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an <b>r-combination</b> of elements of a set?",
                "An unordered selection of <i>r</i> elements from the set. Thus, an <i>r</i>-combination is simply a subset of the set with <i>r</i> elements."
            ],
            "flags": 0,
            "guid": "w]uB.jxD1R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is denoted by \\(C(n,r)\\) or \\(\\binom{n}{r}\\)?",
                "The number of <i>r</i>-combinations of a set with <i>n</i> distinct elements"
            ],
            "flags": 0,
            "guid": "c-N@=f[=uY",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The number of r-combinations of a set with n elements, where n is a nonnegative integer and r is an integer with \\(0 \\leq r \\leq n\\) equals what?",
                "\\(C(n,r) = \\frac{n!}{r!(n-r)!}\\)"
            ],
            "flags": 0,
            "guid": "L=)LOK4UIo",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between r-permutations and r-combinations?",
                "While r-permutations do take into account the order, r-combinations are independent of it. Therefore, permutation is considered to be an ordered combination."
            ],
            "flags": 0,
            "guid": "Ds+v:r~[ui",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::permutation}} of a set of distinct objects is an ordered arrangement of these objects.",
                "."
            ],
            "flags": 0,
            "guid": "t`UYj88/0P",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "An ordered arrangement of <i>r</i> elements of a set is called an {{c1::r-permutation}}",
                "."
            ],
            "flags": 0,
            "guid": "wgsP|mK@fN",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::combinatorial proof}} of an identity is a proof that uses counting arguments to prove that both sides of the identity count the same objects but in different ways or a proof that is based on showing that there is a bijection between the sets of objects counted by the two sides of the identity. These two types of proofs are called {{c2::double counting proofs}} and {{c2::bijective proofs}}, respectively.",
                "."
            ],
            "flags": 0,
            "guid": "xxM[|/tFNr",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM551::Rosen::Chapter6::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a computational model?",
                "An idealized computer"
            ],
            "flags": 0,
            "guid": "wzRBot:Raz",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What kind of computers are finite automata good for?",
                "Computers with limited memory"
            ],
            "flags": 0,
            "guid": "e{MjqI>W)",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What are the probabilistic counterpart of finite automata?",
                "Markov Chains"
            ],
            "flags": 0,
            "guid": "LUefC7iW9U",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Final states are another way of saying what?",
                "Accept states"
            ],
            "flags": 0,
            "guid": "J8JMNoQQct",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What language does a machine that takes no strings recognize?",
                "The empty language \\(\\emptyset\\)"
            ],
            "flags": 0,
            "guid": "iP<+,6_9eO",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does L(M) = A mean?",
                "Machine M recognizes a set of strings A"
            ],
            "flags": 0,
            "guid": "O+~wri8>>s",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When do we say that a language is a <b>regular language</b>?",
                "If some finite automaton recognizes it"
            ],
            "flags": 0,
            "guid": "BXY|<Temd",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The regular operation <b>Concatenation</b> is defined as such: \\(A \\circ B = \\{xy | x \\in A and y \\in B\\}\\). <br/> What does this function do in simple terms?",
                "It attaches a string from A in front of a string from B in all possible ways to get the strings in the new language. "
            ],
            "flags": 0,
            "guid": "x&<V~3oDU-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The regular operation <b>Star</b> is defined as such: \\(A* = \\{x_1x_2...x_k | k \\geq 0 and each x_i \\in A\\}\\). <br/> What does this function do in simple terms?",
                "The star operation is a unary operation that works by attaching any number of strings in A together to get a string in the new language. "
            ],
            "flags": 0,
            "guid": "tF5dhih?(",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the difference between a unary operation and a binary operation?",
                "A unary operation performs an action with a single operand. Binary operations perform actions with two operands. "
            ],
            "flags": 0,
            "guid": "qg8gh$LZg-",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Which regular operation outputs (some) of the following with A = {good, bad}? <br/> {?, good, bad, goodgood, goodbad, badgood, badbad, goodgoodgood, goodgoodbad, goodbadgood, goodbadbad, . . . }",
                "The regular operation <b>star</b>."
            ],
            "flags": 0,
            "guid": "nmDPk>_~e3",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Let \\(N = \\{1,2,3,...\\}\\) be the set of natural numbers, what does it mean when we say that \\(N\\) is <i>closed under multiplication</i>?",
                "For any <i>x</i> and <i>y</i> in \\(N\\), the product \\(x \\times y\\) also is in \\(N\\),"
            ],
            "flags": 0,
            "guid": "D,rG*Y6WDI",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does it mean if a collection of objects is <i>closed</i> under some operation?",
                "If applying that operation to members of the collection returns an object still in the collection "
            ],
            "flags": 0,
            "guid": "GKq6s+t=%d",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the objective in complexity theory?",
                "To classify problems as easy ones, and hard ones."
            ],
            "flags": 0,
            "guid": "Q_2eYRtMa<",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the objective in computability theory?",
                "To classify problems as solvable and not solvable."
            ],
            "flags": 0,
            "guid": "ztAEyk8rB#",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "When is A a <i>proper subset</i> of B?",
                "When A is a subset of B and not equal to B."
            ],
            "flags": 0,
            "guid": "dAwyH1eR>R",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <i>multiset</i>?",
                "A modification of the concept of a set that, unlike a set,  allows for multiple instances for each of its elements. "
            ],
            "flags": 0,
            "guid": "k./ll:7c(e",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a sequence of objects?",
                "A list of the objects in some order."
            ],
            "flags": 0,
            "guid": "f#wtD/5_k0",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "Does repetition matter in a sequence?",
                "No"
            ],
            "flags": 0,
            "guid": "M39y^|u%1g",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a 2-tuple also called?",
                "An ordered pair"
            ],
            "flags": 0,
            "guid": "q.OZmyE/|1",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a power set of A?",
                "The set of all subsets of A"
            ],
            "flags": 0,
            "guid": "v1LyOi)zr.",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the set of possible inputs to a function called?",
                "Its <i>domain</i>."
            ],
            "flags": 0,
            "guid": "Df-`j|P{Uc",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "The outputs of a function come from a set called what?",
                "Its <i>range</i>"
            ],
            "flags": 0,
            "guid": "g!!}_LSkPg",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does <i>D</i> and <i>R</i> signify in \\(f: D \\to R\\)?",
                "Domain and Range"
            ],
            "flags": 0,
            "guid": "qD5pq;UyjY",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a <i>predicate</i> or <i>property</i> function?",
                "A function whose range is \\({TRUE,FALSE}\\)"
            ],
            "flags": 0,
            "guid": "Ko3TqY|HkE",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is the string of length zero called?",
                "The empty string, written \\(\\epsilon\\)"
            ],
            "flags": 0,
            "guid": "s7hJTyXUQM",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an alphabet?",
                "A finite, nonempty set of objects called symbols"
            ],
            "flags": 0,
            "guid": "FX%0:N|3UF",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an argument in an function?",
                "An input to a function"
            ],
            "flags": 0,
            "guid": "Oq`d39reCC",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a binary relation?",
                "A relation whose domain is a set of pairs"
            ],
            "flags": 0,
            "guid": "v[l3H_Z,ky",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::2",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is deterministic computation?",
                "When a machine is in a given state and reads the next input symbol, we know what the next state will be."
            ],
            "flags": 0,
            "guid": "vzw~_-`3:D",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::2"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is a DFA?",
                "A deterministic finite automaton"
            ],
            "flags": 0,
            "guid": "d#Ci1gjBC{",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an NFA?",
                "A nondeterministic finite automaton"
            ],
            "flags": 0,
            "guid": "`IO1*.2Bd",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What does an NFA do if there are multiply paths with the same input?",
                "Splits into multiple copies of itself and follows all the possibiliites in parallel. If there are more choices, it splits again, if it can’t go further, it is destroyed. If <i>any</i> of these copies of the machine is in an accept state at the end of the input, the NFA accepts the input string."
            ],
            "flags": 0,
            "guid": "nSQC+a]DS:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What happens if a state with an \\(\\epsilon\\) symbol on an exiting arrow is encountered?",
                "Without reading any input, the machine splits into multiple copies, one following each of the exiting \\(\\epsilon\\)-labeled arrows, and one staying at the current state. Then the machine proceeds nondeterministically as before."
            ],
            "flags": 0,
            "guid": "bT$u9+Ed)H",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "What is an alphabet containing only one symbol called?",
                "A unary alphabet"
            ],
            "flags": 0,
            "guid": "i~K,2u9O<:",
            "note_model_uuid": "539ca89c-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::3"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A<i>finite automaton</i> is a 5-tuple (\\(Q, \\sum , \\delta , q_o, F\\)), where <br/>\n1. \\(Q\\) is a finite set called the {{c1::<b>states</b>}}, <br/>\n2. \\(\\sum \\) is a finite set called the {{c2::<b>alphabe</b>t}}, <br/>\n3. \\(\\delta : Q \\times \\sum \\to Q\\) is the {{c3::<b>transition function</b>}} <br/>\n4. \\(q_0 \\in Q\\) is the {{c4::<b>start state</b>}}, and <br/>\n5. \\(F \\subseteq Q\\) is the {{c5::<b>set of accept states</b>}}",
                "."
            ],
            "flags": 0,
            "guid": "I*/2/V]/dI",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "If A is the set of all strings that machine M accepts, we say that A is the <b>{{c1::language}} of machine M</b>.",
                "."
            ],
            "flags": 0,
            "guid": "k6237l)h2P",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::1::1"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A mathematical model of computation called {{c1::<i>finite automaton</i>}} is used in text processing, compilers, and hardware design.",
                "."
            ],
            "flags": 0,
            "guid": "B%V8>GmTn.",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A mathematical model of computation called {{c1::<i>context-free grammar</i>}} is used in programming languages and artificial intelligence.",
                "."
            ],
            "flags": 0,
            "guid": "Qhk_*yic><",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::1",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "{{c1::<b>Definitions</b>}} describe the objects and notions that we use.",
                "."
            ],
            "flags": 0,
            "guid": "G`}m<As>#e",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::proof}} is a convincing logical argument that a statement is true.",
                ""
            ],
            "flags": 0,
            "guid": "c8#w0zyPQ!",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional"
            ]
        },
        {
            "__type__": "Note",
            "data": "",
            "fields": [
                "A {{c1::theorem}} is a mathematical statement proved true.",
                ""
            ],
            "flags": 0,
            "guid": "ei2!aRnw|{",
            "note_model_uuid": "539d3988-a514-11ec-b44f-acde48001122",
            "tags": [
                "CS::DM565::Sipser::0::3",
                "CS::DM565::optional"
            ]
        }
    ]
}